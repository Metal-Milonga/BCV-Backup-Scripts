Command_Options() {
#
# Function - Command_Options
# Version - 1.20
# Author - David Holton
# Date - April 19, 2002
#
# Description - This function makes sure the commandline options passed to the
#		the main script are correct and have the right format.  If they
#		are NOT correct, this function prints out a syntax error message
#		and usage message.
#		Then it exits the script without executing any further functions.
#
###############################################################################
# Modification history
# Date     Who          What was modified.
# -------- ------------ ------------------
# 03/26/03 Dave Holton	Removed the huge evaluation sequence to see if the
#			command line was right.  Now letting getopts do all
#			work instead of trying to figure out each possible
#			combination. Adjusted the getopts SERVER variable
#			assignment to test for a valid server passed on the
#			command line.
# 03/28/03 Dave Holton	Added the commandline option -s to signify SPLIT_MODE
#			variable as NON_STOP, WAIT, PIPE, or CMD.
#			This does away with the -W option. The WAIT
#			option waits until the preset time in the config file.
#			The PIPE function waits for a signal from a FIFO named
#			pipe in the etc directory.  The CMD option waits for
#			an entry on the command line the script is running on.
#			Of course, NON_STOP does not wait at all.
# 04/24/03 Dave Holton	Adjusted the USAGE message to reflect the removal of
#			the W commandline option and an explaination of the
#			"s" option with its four arguements.
#
###############################################################################
#set -x

NO_Options() {
#set -x
#
# This internal function checks to make sure we had some arguements passed to the script.
# If the script was put in without ANY options, it will print out a usage message and
# exit the script.
#

# If $# (the total number of command-line arguements) is 0,then print the
# the usage message and exit.
if [[ $# -eq 0 ]]
then
	print; print
	print "\tBCV-Est.sh Command-Line Syntax Error."
	print ${USAGE}
	exit
	print; print
fi
}

EVALUATE_OPTIONS() {
#set -x
#
# This internal function checks the syntax of the arguements passed to the script
# and make sure they are correct.
#
#
# The OPTIONS variable is made by taking the dashes (-) out of the arguement string.
# It makes it easier to check the syntax if there are no dashes.
#
# $* lists the entire set of command-line arguements encased in double quotes.
#
OPTIONS=$( echo $* | sed "s/-//g")
#print OPTIONS are now: ${OPTIONS}
#print

# Store the original arguements (with the dashes) in the U_OPTIONS variable.
#
U_OPTIONS=$( echo $* )

# Evaluate the options to find if a W or and I was passed.  The we will test to make
# sure they are NOT BOTH passed at the same time.
#
OPTION_W=$(echo ${OPTIONS} | grep W )
OPTION_I=$(echo ${OPTIONS} | grep I )
#
# If the test fails then print the usage message and exit the main script.
#
if [[ -n ${OPTION_W} && -n ${OPTION_I} ]]
then
	print
	print Inside Function, OPTIONS are: ${OPTIONS}
	print
	print "\tBCV-Est.sh Command-Line Syntax Error."
	print "\tYou can NOT use the W and the I at the same time."
	print
	print ${USAGE}
	print; print
	exit
fi
}

# The usage message. One big, multiline variable.
#
USAGE=$(cat << END_OF_USAGE 
usage: BCV-Est.sh [-B] [-F] [-M] -S servername [-C new_config_file] [-s split_mode_arguement]  \n
\t The "S" option is NOT optional.  It MUST be supplied with a valid servername following.\n
\t\t	Current valid servers are server09, server16, & server20. \n\n
\t The M, F, B, C options do not have to be used. They are optional. \n
\t By default the Establish will be run in Incremental mode with NO visual monitor, and Backups turned OFF. \n\n
\t -F = Will run a FULL Establish \n
\t -M = Will display information on the screen as the script monitors the establish. \n\n
\t -s = There are four split_modes_arguements at this time: \n
\t\t	wait -	 Will force the Split to wait until the time set in the Config file. \n
\t\t\t		It was designed for use in crontab. Data Services needs the split to happen at specfic times. \n
\t\t    non-stop - The split will take place as soon as the Establish has finished. \n
\t\t\t		This is the default. \n
\t\t	cmd - 	Use this one if you run the script from the commandline, but want it to wait for \n
\t\t\t		a signal from you to begin the split. The signal is typed on the commandline. \n
\t\t	pipe -	Use this mode if you want to start the script, but check it in another location. \n
\t\t\t		It is best to use this one from starting the script in cron.  You must check the \n
\t\t\t		log file and send the script a signal through a named pipe. The log file will have \n
\t\t\t		instructions in it about where to find the pipe and what to signal to send through it. \n\n
\t -B = Should only be used with crontab.  It runs the OmniBack backup job at the end of the script. \n
\t -C = Designate a different Config file to be used. It must be in /usr/local/bin/bcvscripts/etc \n\n
\t As always you can combine command that do not take arguements behind one dash.\n
\t Example:\t -FMC new_config_file -S servername \n
\t OR:\t\t -BFS servername -C new_config_file
\n\n
END_OF_USAGE)

#
# Run the internal functions to make sure we have a good commandline
#
NO_Options $@
EVALUATE_OPTIONS $@

#
# Use getopts to handle any or all of the variables passed to the script.
#
while getopts ":BC:FMS:s:" opt
do
	case $opt in
		B )	RUN_BACKUP=YES
			;;
		C )	CONFIG_FILE=${OPTARG}
			;;
		F )	EST_TYPE=FULL
			;;
		M )	MANUAL_MONITOR=YES
			;;
		S )	SERVER=${OPTARG}
			#if [[ ${SERVER} != "server"@(09|16|20) ]]
			#then
			#	print; print "\tOption S (Server) was not correct!"
			#	print
			#	print ${USAGE}
			#	exit
			#fi
			;;
		s )	SPLIT_MODE=$( echo ${OPTARG} | tr "[:lower:]" "[:upper:]" )
			print Split Mode is set to: ${SPLIT_MODE}
			if [[ ${SPLIT_MODE} != @(WAIT|PIPE|CMD|NON_STOP) ]]
			then
				print "Option s (Split Mode) was not correct!"
				print "Split Mode set to: ${SPLIT_MODE}"
				print
				exit
			fi
			;;
		? )	print ${USAGE}
			print exiting
			exit
	esac
done

#
# Print the values of the variables to the log
#
print "Script started with the following Options and Arguements: $*" 

print SERVER is set to: ${SERVER} 

if [ -n "${CONFIG_FILE}" ]
then
	print CONFIG_FILE is set to: ${CONFIG_FILE} 
else
	print CONFIG_FILE: Default config file will be used. 
fi

#
# If the following variables do not already have a value, set it to the default value
# which follows the ":="
#
EST_TYPE=${EST_TYPE:=incr}
RUN_BACKUP=${RUN_BACKUP:=NO}
MANUAL_MONITOR=${MANUAL_MONITOR:=NO}
SPLIT_MODE=${SPLIT_MODE:=NON_STOP}
DEBUG_MODE=${DEBUG_MODE:=OFF}

print Establish Type is set to: ${EST_TYPE} 
print RUN_BACKUP is set to: ${RUN_BACKUP} 
print Manual Monitoring is set to: ${MANUAL_MONITOR} 
print Split Mode is set to: ${SPLIT_MODE}
print Debug Mode is set to: ${DEBUG_MODE}

print
}
