Declare_General_Variables(){
#
# Function - Declare_General_Variables
# Version - 1.1
# Author - David Holton
# Date - April 19, 2002
#
# Description - This function sets up the majority of the variables and arrays
#		used by the rest of the functions.
#
###############################################################################
# Modification history
# Date     Who          What was modified.
# -------- ------------ ------------------
# 07/09/02 daholton	Moved the two messages the print the location of the
#			config file to show up after the Server Verification
#			messages.
# 07/30/02 daholton	Added the creation of a hot backup mode log file that
#			will capture the output of the Oracle scripts that
#			put the databases in and out of backup mode.
# 05/21/03 david holton	Added the DBA Notification list as an array.
# 08/02/04 david holton	Changed the variables
#			ORA_START_HB=ora_start*backup.log
#			ORA_STOP_HB=ora_stop*backup.log
#			to ora_start*backup.log & ora_stop*backup.log so that
#			the Pull function will get all the logs from srvr09.
#			srvr09 has a separate log for each Oracle instance.
#			Once it is verified to work, I will put in more code
#			to check the scripts in a more streamlined manner.
# 08/23/04 david holton	Added code to remove the old ora_start_backup.log
#			and ora_stop_backup.log files. These are the files
#			generated by the DBA's script to put the DBs into
#			hot backup mode.  We pull them over toward the end of
#			the Est/Split process to check for errors.
# 08/31/04 david holton	Added the ORA_ERROR_LOG variable to hold errors
#			extracted from the Oracle logs pulled from the servers.
#
###############################################################################
#set -n

print Start Declare_General_Variables Function. $(date).

#
## The U_OPTIONS and SERVER variables are originally set in the
## Command_Options function.
#
print Script started with the following Options and Arguements: ${U_OPTIONS}
print Working on BCVs for SERVER: ${SERVER}

#
## Generic Directory variables
#
SYMCLIDIR="/usr/symcli/bin"
BINDIR="/usr/bin"
SBINDIR="/usr/sbin"
LBINDIR="/usr/local/bin"
CNTRBDIR="/usr/contrib/bin"
BCVDIR="/usr/local/bin/bcvscripts"
BKUPDIR="${BCVDIR}/Backup"
BCVBINDIR="/usr/local/bin/bcvscripts/bin"
BCVLOGDIR="/usr/local/bin/bcvscripts/logs"
BCVETCDIR="/usr/local/bin/bcvscripts/etc"
BCVLIBDIR="/usr/local/bin/bcvscripts/lib"
BCVTMPDIR="/usr/local/bin/bcvscripts/tmp"
ROOTDSKDIR="/root/disks"

#
## Log files created during script execution.
#
BCVLOGFILE=${BCVLOGDIR}/${SERVER}_BCV_LOG
EMAIL_RPT="${BCVLOGDIR}/${SERVER}_Email_Report"
QEMAIL_RPT="${BCVLOGDIR}/${SERVER}_QEmail_Report"
ERROR_RPT="${BCVLOGDIR}/${SERVER}_Error_Report"
ORA_ERROR_LOG="${BCVLOGDIR}/${SERVER}_ORACLE_Log"

#
## Set up the Email report. If there is one already there
## remove it and start a new one.
#
if [[ -f ${EMAIL_RPT} ]]
then
	rm ${EMAIL_RPT}
	print EMAIL REPORT Initialized at $(date) > ${EMAIL_RPT}
else
	print EMAIL REPORT Initialized at $(date) > ${EMAIL_RPT}
fi

#
## Set up the Quick Email report. If there is one already there
## remove it and start a new one.
#
if [[ -f ${QEMAIL_RPT} ]]
then
	rm ${QEMAIL_RPT}
	print "Quick Status Report:" > ${QEMAIL_RPT}
else
	print "Quick Status Report:" > ${QEMAIL_RPT}
fi

#
## Some General messages for the Email Report.
#
print ${START_MESG} >> ${EMAIL_RPT}
print >> ${EMAIL_RPT}
print Script started with the following Options and Arguements: ${U_OPTIONS} >> ${EMAIL_RPT}
print Working on BCVs for SERVER: ${SERVER} >> ${EMAIL_RPT}

#
## Set up the Error report. If there is one already there
## remove it and start a new one.
#
if [[ -f ${ERROR_RPT} ]]
then
	rm ${ERROR_RPT}
	touch ${ERROR_RPT}
else
	touch ${ERROR_RPT}
fi

#
## Set up the error log which holds errors extracted from the Oracle logs pulled from 
## the individual server.
#
if [[ -f ${ORA_ERROR_LOG} ]]
then
	rm ${ORA_ERROR_LOG}
fi
touch ${ORA_ERROR_LOG}
	

#
## Set up the variable for the Config file for all BCV Establish and Splits
## Check to see if it really exists.  If not, then indicate the error and
## exit the script.
## Once it is found, then print to the reports files which config file we are using.
#
if [ -n "${CONFIG_FILE}" ]
then
	BCVCFGFILE="${BCVETCDIR}/${CONFIG_FILE}"
	if [ ! -f ${BCVCFGFILE} ]
	then
		print; print
		print ERROR: I can not find the Configuration file!.  Exiting the script.
		print ERROR: I can not find the Configuration file!.  Exiting the script. >> ${EMAIL_RPT}
		print ERROR: I can not find the Configuration file!.  Exiting the script. >> ${ERROR_RPT}
		print Please be sure the config file in in ${BCVETCDIR}
		Notify Final
		Notify Error
		print; print
		exit
	fi
else
	#
	## This is the default config file. It is used if no option is given for
	## the config file.
	#
	##BCVCFGFILE="${BCVETCDIR}/bcv_scripts.conf.test"	# For testing 
	#
	BCVCFGFILE="${BCVETCDIR}/bcv_scripts.conf"		# For Production.
fi
#
## Moved these print messages to come after the Server Verification message.
#
###print Configuration file is: ${BCVCFGFILE}
###print Configuration file is: ${BCVCFGFILE} >> ${EMAIL_RPT}

## BEGIN Server Verification section
#
## Now that the Config file's existence has been confirmed.
## Verify that the SERVER is a valid server to be used by this script.
#
## Starting with a negative value...
VALID_SRVR=NO
#
## Pull the valid servers out of the config file and load them into an array.
set -A VALID_SERVERS $(grep BCV_SERVERS ${BCVCFGFILE} | cut -d":" -f2 | sed "s/,/ /g")
#
## Set a count of how many valid server there are from the total number of elements in the array.
TOTAL_VALID_SERVERS=${#VALID_SERVERS[*]}

	# The following two lines were for testing the contents of the array.  I'm keeping them
	# around as a reference of how it was done.
	#
	##print TOTAL_VALID_SERVERS are: ${#VALID_SERVERS[*]}
	##print VALID_SERVERS are: ${VALID_SERVERS[*]}

#
## Cycle through each element of the array.
for SERVR in ${VALID_SERVERS[*]}
do
	#print SERVR is $SERVR
	#print SERVER is ${SERVER}
	if [[ ${SERVER} = ${SERVR} ]]
	then
		#
		## If we find a match set the the value to YES
		VALID_SRVR=YES
	fi
done

if [[ ${VALID_SRVR} = 'YES' ]]
then
	print SERVER ${SERVER} is a valid BCV Server. Continuing.
	print SERVER ${SERVER} is a valid BCV Server. Continuing. >> ${EMAIL_RPT}
else
	print SERVER ${SERVER} is NOT a valid BCV Server. Exiting.
	print SERVER ${SERVER} is NOT a valid BCV Server. Exiting. >> ${EMAIL_RPT}
	print SERVER ${SERVER} is NOT a valid BCV Server. Exiting. >> ${ERROR_RPT}
	Notify Final
	Notify Error
	print; print
	exit
fi
## END Server Verification section

#
## More General messages to STDOUT & the Email Report
## These all relate to the command-line arguements, and
## the resulting variables for arguements given and those
## not given.
#
print Configuration file is: ${BCVCFGFILE}
print Configuration file is: ${BCVCFGFILE} >> ${EMAIL_RPT}
print Establish Type is: ${EST_TYPE}
print Establish Type is: ${EST_TYPE} >> ${EMAIL_RPT}
print Run Backup is set to: ${RUN_BACKUP}
print Run Backup is set to: ${RUN_BACKUP} >> ${EMAIL_RPT}
print Manual Monitoring is set to: ${MANUAL_MONITOR}
print Manual Monitoring is set to: ${MANUAL_MONITOR} >> ${EMAIL_RPT}
#print Wait to Split the BCVs is set to ${WAIT_TO_SPLIT}
#print Wait to Split the BCVs is set to ${WAIT_TO_SPLIT} >> ${EMAIL_RPT}
print Split Mode is set to ${SPLIT_MODE}
print Split Mode is set to ${SPLIT_MODE} >> ${EMAIL_RPT}
print Split Time is: $(grep ${SERVER}_SPLIT_Time ${BCVCFGFILE} | cut -d":" -f2-)
print Split Time is: $(grep ${SERVER}_SPLIT_Time ${BCVCFGFILE} | cut -d":" -f2-) >> ${EMAIL_RPT}


#
## The instances variable works with the backup (OMNIBACK) functions
## It helps the script understand how many instances of it are running
## at any one time.  I.E. if you run two instances of the script to work
## with two different sets of BCVs.  It helps the script keep track of 
## the tmp file  that records what filesystems are mounted or not.
#
TOTAL_INSTANCES=$(grep INSTANCES ${BCVCFGFILE} | cut -d":" -f2)
	##print TOTAL_INSTANCES are: ${TOTAL_INSTANCES}
#
## Initialize the variable to record any LVM errors.  It is simply going to
## contain a count of the errors.  You will need to look at the detailed log
## to see specifics.  This variable only acts as a warning indicator.
#
LVM_ERRORS=0

#
## Temp files created during script execution.
#
BCV_VERIFY_VARIABLES="${BCVTMPDIR}/${SERVER}_Verify_Variables"
BCV_VG_ELEMENTS="${BCVTMPDIR}/${SERVER}_VG_ELEM.vars"
BCV_VG_XACT_ELEMENTS="${BCVTMPDIR}/${SERVER}_VG_ELEM_XACT.vars"
BCV_DG_ELEMENTS="${BCVTMPDIR}/${SERVER}_DG_ELEM.vars"
BCV_DG_XACT_ELEMENTS="${BCVTMPDIR}/${SERVER}_DG_ELEM_XACT.vars"
BCV_UMOUNT_STATUS="${BCVTMPDIR}/${SERVER}_UMOUNT_STATUS"
BCV_VGCHANGE_STATUS="${BCVTMPDIR}/${SERVER}_VGCHANGE_STATUS"
BCV_EST_STATUS="${BCVTMPDIR}/${SERVER}_EST_STATUS"
BCV_SYNC_STATUS="${BCVTMPDIR}/${SERVER}_SYNC_STATUS"
BCV_SPLIT_STATUS="${BCVTMPDIR}/${SERVER}_SPLIT_STATUS"
BCV_MONITOR_STATUS="${BCVTMPDIR}/${SERVER}_EST_MONITOR"
BCV_EXPORT_STATUS="${BCVTMPDIR}/${SERVER}_EXPORT_STATUS"
BCV_IMPORT_STATUS="${BCVTMPDIR}/${SERVER}_IMPORT_STATUS"
BCV_VG_MINNUM="${BCVTMPDIR}/${SERVER}_VG_MINNUM"
BCV_RE_MOUNT="${BCVTMPDIR}/${SERVER}_RE_MOUNT"
FSCK_OUTPUT="${BCVTMPDIR}/${SERVER}_FSCK_OUTPUT"

#
## Beginning of  Variables related to Oracle Hot Backup Mode
## The HBMDIR is located on each server in /usr/local/bin.
## There is an archive directory where the scripts are kept for backup. It
## is located on cu19 in /usr/local/bin/bcvscripts/HBM.archive.
#
HBMDIR=${LBINDIR}/HBM
case ${SERVER} in
	server09 )	ORA_START_HBM=${HBMDIR}/srvr09-StartHotBackup.sh
			ORA_STOP_HBM=${HBMDIR}/srvr09-StopHotBackup.sh
			;;
	server16 )	ORA_START_HBM=${HBMDIR}/srvr16-StartHotBackup.sh
			ORA_STOP_HBM=${HBMDIR}/srvr16-StopHotBackup.sh
			;;
	server20 )	ORA_START_HBM=${HBMDIR}/srvr20-StartHotBackup.sh
			ORA_STOP_HBM=${HBMDIR}/srvr20-StopHotBackup.sh
esac

REMOTE_ORA_LOGDIR=/home/oracle/logs
ORA_START_HB=ora_start*backup*.log
ORA_STOP_HB=ora_stop*backup*.log
#ORA_START_HB=ora_start_backup.log
#ORA_STOP_HB=ora_stop_backup.log
#
## Get HBMLOGFILE ready for use.
#
HBMLOGFILE=${BCVLOGDIR}/${SERVER}-HBM.log
if [[ -f ${HBMLOGFILE} ]]
then
	rm ${HBMLOGFILE}
fi
touch ${HBMLOGFILE}

#
## Remove the old ora_start and ora_stop log files.
#
if [[ -f ${BCVLOGDIR}/${ORA_START_HB} ]]
then
	rm ${BCVLOGDIR}/${ORA_START_HB}
fi
if [[ -f ${BCVLOGDIR}/${ORA_STOP_HB} ]]
then
	rm ${BCVLOGDIR}/${ORA_STOP_HB}
fi
#
## END of  Variables related to Oracle Hot Backup Mode
#

#
## Users to notify. These lines build arrays of user names
## for use with the Notify function. The names are pulled
## from the config file.
#
set -A FINAL_NOTIFY $( grep FINAL ${BCVCFGFILE} | cut -d":" -f2 | sed "s/,/ /g")
set -A ERROR_NOTIFY $( grep ERROR ${BCVCFGFILE} | cut -d":" -f2 | sed "s/,/ /g")
set -A DBA_NOTIFY $( grep DBA ${BCVCFGFILE} | cut -d":" -f2 | sed "s/,/ /g")

#
## Time related Variables.  The COUNT_TIME variables are for use with the Time_Counter
## function.  They tell the function how long to sleep.
#
COUNT_TIME_3=$(grep WAIT_COUNT_3 ${BCVCFGFILE} | cut -d":" -f2)
COUNT_TIME_6=$(grep WAIT_COUNT_6 ${BCVCFGFILE} | cut -d":" -f2)
COUNT_TIME_9=$(grep WAIT_COUNT_9 ${BCVCFGFILE} | cut -d":" -f2)
COUNT_TIME_S30=$(grep WAIT_COUNT_S30 ${BCVCFGFILE} | cut -d":" -f2)
COUNT_TIME_S60=$(grep WAIT_COUNT_S60 ${BCVCFGFILE} | cut -d":" -f2)

#
## The Split Time variables lets the script know after what time it is okay to split the BCVs.
## The value is found in the config file.
## It also preps some other variables used in the function to determine how long the script sleeps
## before it splits.
#
SPLIT_TIME=$(grep ${SERVER}_SPLIT_Time ${BCVCFGFILE} | cut -d":" -f2-)
SPLIT_TIME_2=$(grep ${SERVER}_SPLIT_Time ${BCVCFGFILE}  | cut -d":" -f2- | sed "s/://g")
SPLIT_HR=$(echo ${SPLIT_TIME} | cut -d":" -f1)
SPLIT_MIN=$(echo ${SPLIT_TIME} | cut -d":" -f2)
SPLIT_SEC=$(echo ${SPLIT_TIME} | cut -d":" -f3)
SPLIT_TOT_SEC=$(( (${SPLIT_HR} * 3600) + (${SPLIT_MIN} * 60) + ${SPLIT_SEC} ))

#
## If the file exists then remove it and prep a new one.
## This is a file that records the value of all, I hope, the variables set up
## by the script and functions.  It is recoreded for troubleshooting purposes.
#
if [[ -f ${BCV_VERIFY_VARIABLES} ]]
then
	rm ${BCV_VERIFY_VARIABLES}
fi
touch ${BCV_VERIFY_VARIABLES}

print >> ${EMAIL_RPT}
print End Declare_General_Variables Function. $(date); print
}
