Split_BCVs() {
#
# Function - Split_BCVs
# Version - 1.06
# Author - David Holton
# Date - April 19, 2002
#
# Description - This function will initiate the split of the BCVs. This
#		funciton cantains two functions within it:
#
#		The Split_The_BCVs loop calls the Start and Stop Hot Backup
#		scripts for the Oracle databases.  In between Starting
#		and Stopping Oracle Hot Backup mode, it performs the BCV split
#		for the appropriate EMC Device Groups.
#
#		If the -W option is used to start the BCV-Est.sh script, then
#		this function will wait until the Split time defined in the 
#		configuration file before actually splitting the BCVs. This is
#		accomplished by the second function. It makes use of the
#		Determine_Split_Wait function to find the right about of time
#		to sleep until it is time to perform the split.
#		
#
###############################################################################
# Modification history
# Date     Who          What was modified.
# -------- ------------ ------------------
# 05/23/02 Dave Holton	Edited the Wait_To_Split_Loop to run the new
#			Determine_Split_Wait function, and edited the line in
#			the Wait_To_Split_Loop that calls the Time_Counter to
#			use the value of $COUNT_TIME returned from the
#			Determine_Split_Wait function.
# 05/24/02 Dave Holton	In the Wait_To_Split_Loop, changed the comparison of
#			current time and split time to use >= instead of >
# 07/09/02 Dave Holton	Commented out reports of indivitual splits from going
#			to the email report. Also, lines regarding the wait
#			state and when the split time is set to.
# 11/26/02 Dave Holton	Added code to check for a SPLIT_LOCK file.  If the file
#			is present, then another instance of the script is
#			running a split routine. In that case, sleep for 900
#			seconds and check again. If the file is not there then
#			it is okay to split the BCVs, but first we touch the
#			SPLIT_LOCK file so no other instances will error out
#			while we are splitting.  Once we are finished, the 
#			script removes the SPLIT_LOCK FILE.
# 11/29/02 Dave Holton	Moved the SPLIT_LOCK logic inside the Split_The_BCVs
#			internal function.  Then it is only executed when an
#			instance of the script is ready to split.
# 03/28/03 Dave Holton	Removing the WAIT_TO_SPLIT variable and replacing it
#			with the SPLIT_MODE variable. Adding code for the
#			PIPE, CMD, and NON_STOP split modes.  WAIT works the
#			same as WAIT_TO_SPLIT variable did.
#
###############################################################################
#set -n

print Start Split BCVs function. $(date)
print >> ${EMAIL_RPT}

if [[ -f ${BCV_SPLIT_STATUS} ]]
then
	rm ${BCV_SPLIT_STATUS}
fi
touch ${BCV_SPLIT_STATUS}

########################
## INTERNAL FUNCTIONS ##
########################
Split_The_BCVs() {

	SPLIT_LOCK_STATUS=1
	SPLIT_LOCK_FILE=${BCVTMPDIR}/SPLIT_LOCK

	while [[ ${SPLIT_LOCK_STATUS} -ne 0 ]]
	do
		if [[ -a ${SPLIT_LOCK_FILE} ]]
		then
			print "Another instance is currently splitting. Sleeping 15 minutes."
			Time_Counter 300
			SPLIT_LOCK_STATUS=1
		else
			touch ${SPLIT_LOCK_FILE}
			SPLIT_LOCK_STATUS=0
		fi
	done

	Start_Oracle_HotBackup_Mode

	Time_Counter 120

	print BCV Split started at $(date) >> ${EMAIL_RPT}
	print BCV Split started at $(date) >> ${QEMAIL_RPT}

	for DGROUPS in $( ${SERVER}_GET_ALL_DGS )
	do
		print BCV Split started at $(date)
		print "#"
		print Working on ${DGROUPS}

		print Running Command: ${SYMCLIDIR}/symir -g ${DGROUPS} -noprompt split
		${SYMCLIDIR}/symmir -g ${DGROUPS} -noprompt split
		SPLIT_STAT=${?}

		print ${DGROUPS}=${SPLIT_STAT} >> ${BCV_SPLIT_STATUS}

		if [[ "${SPLIT_STAT}" -eq "0" ]]
		then
			print Device Group ${DGROUPS} was split successfully.
			##print DG ${DGROUPS} split successfully. >> ${EMAIL_RPT}
		else
			print Device Group ${DGROUPS} did NOT split.
			print Device Group ${DGROUPS} did NOT split. >> ${EMAIL_RPT}
			print Device Group ${DGROUPS} did NOT split. >> ${ERROR_RPT}
		fi
		print "#"
	done

	Stop_Oracle_HotBackup_Mode

	Time_Counter 120

}


Wait_To_Split_Loop() {
STOP_LOOP=1
until (( ${STOP_LOOP} == 0 ))
do
	CURRENT_TIME=$(date +%H%M%S)
	print CURRENT_TIME is: ${CURRENT_TIME}
	print SPLIT_TIME is: ${SPLIT_TIME_2}

	if (( ${CURRENT_TIME} >= ${SPLIT_TIME_2} ))
	then

		print "#"
		print It is now okay to Split the BCVs
		print "#"

		print Number of Device Groups is: $( ${SERVER}_Total_DGs )
		print Device Groups are: $( ${SERVER}_GET_ALL_DGS )
		print "#"

		Split_The_BCVs

		STOP_LOOP=0
	else
		Determine_Split_Wait
		print It is NOT time to Split the BCVs YET!
		Time_Counter ${COUNT_TIME}
	fi
done
}

#
### The WAIT_TO_SPLIT variable has been superceded by the SPLIT_MODE variable,
### which was added below.  It allows more control over when the Device Groups
### are split.  The code is directly below the commented WAIT_TO_SPLIT code.
#
###if [[ ${WAIT_TO_SPLIT} = "YES" ]]
###then
###	print Wait to Split is set to: ${WAIT_TO_SPLIT}
###	##print Wait to Split is set to: ${WAIT_TO_SPLIT} >> ${EMAIL_RPT}
###	print I must wait until ${SPLIT_TIME} to split the BCVs.
###	##print I must wait until ${SPLIT_TIME} to split the BCVs. >> ${EMAIL_RPT}
###	print "#"
###	Wait_To_Split_Loop
###else
###	print Wait to Split is set to: ${WAIT_TO_SPLIT}
###	##print Wait to Split is set to: ${WAIT_TO_SPLIT} >> ${EMAIL_RPT}
###	print I can split the BCVs NOW!
###	##print I can split the BCVs NOW! >> ${EMAIL_RPT}
###	print "#"
###	Split_The_BCVs
###fi

case ${SPLIT_MODE} in
	NON_STOP )
		print Split Mode is set to: ${SPLIT_MODE}
		print I can split the BCVs NOW!
		print "#"
		Split_The_BCVs
		;;
	WAIT )
		print Split Mode is set to: ${SPLIT_MODE}
		print I must wait until ${SPLIT_TIME} to split the BCVs.
		print "#"
		Wait_To_Split_Loop
		;;
	 PIPE )
		#
		## Set up the Pipe log so you can check if the script is waiting for a signal to split.
		## This is in the event the script was started on a commandline and nothing is going to
		## the log file.
		#
		PIPE_LOG="${BCVLOGDIR}/${SERVER}_Pipe_Log"
		if [[ -f ${PIPE_LOG} ]]
		then
			rm ${PIPE_LOG}
		fi
		touch ${PIPE_LOG}

#		if [[ -p ${BCVETCDIR}/${SERVER}_FIFO ]]
#		then
#			print "FIFO pipe is on place."
#		else
#			print "FIFO pipe NOT in place. Creating..."
			

		READY_SPLIT=NO

		until [[ ${READY_SPLIT} = "YES" ]]
		do
			print "#"
			print Split Mode is set to: ${SPLIT_MODE}
			print "#"
			print "Waiting on \"go\" signal from ${BCVETCDIR}/${SERVER}_FIFO before proceeding."
			print "#"

			#
			## Print the above messages to the pipe log.
			#
			print "#" >> ${PIPE_LOG}
			print Split Mode is set to: ${SPLIT_MODE} >> ${PIPE_LOG}
			print "#" >> ${PIPE_LOG}
			print "Waiting on \"go\" signal from ${BCVETCDIR}/${SERVER}_FIFO before proceeding." >> ${PIPE_LOG}
			print "#" >> ${PIPE_LOG}

			read SPLIT_SIGNAL < ${BCVETCDIR}/${SERVER}_FIFO
			SPLIT_SIGNAL=$( echo ${SPLIT_SIGNAL} | tr "[:lower:]" "[:upper:]" )
			if [[ ${SPLIT_SIGNAL} = "GO" ]]
			then
				print "Signal from ${SERVER}_FIFO was correct. Proceeding with BCV Split."
				print "Signal from ${SERVER}_FIFO was correct. Proceeding with BCV Split." >> ${PIPE_LOG}
				READY_SPLIT=YES
				Split_The_BCVs
			else
				print "#"
				print "Signal from ${SERVER}_FIFO was incorrect. Waiting on signal \"go\"."
				print "Signal from ${SERVER}_FIFO was incorrect. Waiting on signal \"go\"." >> ${PIPE_LOG}
			fi
		done
		;;
	 CMD )
		READY_SPLIT=NO
		until [[ ${READY_SPLIT} = "YES" ]]
		do
			print "#"
			print "Split Mode is set to: ${SPLIT_MODE}\nPlease enter go to proceed to split the BCVs: \c"
			read REPLY
			REPLY=$( echo $REPLY | tr "[:lower:]" "[:upper:]" )
			if [[ ${REPLY} = "GO" ]]
			then
				READY_SPLIT=YES
				Split_The_BCVs
			else
				print "#"
				print "Commandline entry not correct. Please enter \"go\" to proceed with BCV Split"
			fi
		done
		;;
	* )
		print Split Mode not set properly.
		;;
esac

rm ${SPLIT_LOCK_FILE}

print "#"
print End Split BCVs function. $(date); print
}
